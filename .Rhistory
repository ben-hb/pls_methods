mutate(stig_per3 = case_when((stig_per_3 == 1 | stig_per_3 == 2 | stig_per_3 == 3) ~ 1,
(stig_per_3 == 4 | stig_per_3 == 5 | stig_per_3 == 6) ~ 0))
testdf.v26$stig_pcv2 <- as.logical(testdf.v26$stig_pcv2)
testdf.v26$stig_pcv3 <- as.logical(testdf.v26$stig_pcv3)
testdf.v26$stig_per2 <- as.logical(testdf.v26$stig_per2)
testdf.v26$stig_per3 <- as.logical(testdf.v26$stig_per3)
table(testdf.v26$stig_pcv2)  # Most people feel that MH tx is a sign of personal failure.
table(testdf.v26$stig_pcv3)  # Most people think less of a person who has received MH tx.
table(testdf.v26$stig_per2)  # I feel that receiving MH tx is a sign of personal failure.
table(testdf.v26$stig_per3)  # I would think less of a person who has received MH tx.
# combine sstigma questions into one binary variable
testdf.v26 <- testdf.v26 %>%
mutate(mh_stigma = case_when(stig_pcv2 == 1 ~ 1,
stig_pcv3 == 1 ~ 1,
stig_per2 == 1 ~ 1,
stig_per3 == 1 ~ 1,
stig_pcv2 == 0 ~ 0,
stig_pcv3 == 0 ~ 0,
stig_per2 == 0 ~ 0,
stig_per3 == 0 ~ 0)) %>%
filter(!is.na(mh_stigma))  # filters out NAs
testdf.v26$mh_stigma <- as.logical(testdf.v26$mh_stigma)
table(testdf.v26$mh_stigma, useNA = "always") # check out, NAs
# create new var for medication and/or therapy utilization
testdf.v26 <- testdf.v26 %>%
mutate(ther = case_when(ther_cur == 1 ~ 1,
ther_cur1 == 1 ~ 1,
ther_ever == 3 ~ 1,
ther_ever == 4 ~ 1,
ther_cur == 0 ~ 0,
ther_ever == 0 ~ 0)) %>%
filter(!is.na(ther))
testdf.v26$ther <- as.logical(testdf.v26$ther)
table(testdf.v26$ther, useNA = "always")
# create new var for medication and/or therapy utilization
testdf.v26 <- testdf.v26 %>%
mutate(ther = case_when(ther_cur == 1 ~ 1,
ther_cur1 == 1 ~ 1,
ther_ever == 3 ~ 1,
ther_ever == 4 ~ 1,
ther_cur == 0 ~ 0,
ther_ever == 0 ~ 0)) %>%
filter(!is.na(ther))
testdf.v26$ther <- as.logical(testdf.v26$ther)
table(testdf.v26$ther, useNA = "always")
# Prep SEM data vars
testdf_sem <- testdf.v26 %>% select(
# outcome var
si_type, si_activ,
# premotivation
age, sexual, race, gender_tgd, sib_freq, ed_any, dx_mh, meds_any, finpast,
religios, ins_no, international, undercls,
# life events
gpa_sr, psyhx, fincur, drugs_yn, drug_mar, assault, binge,
# defeat-entrapment
deprawsc, anx_score, dep_impa, percneed,
# threats to internal/external moderation
persist, aaq_tot, flourish, talk, ther, satisfied_overall)
# create sem matrix
testdf_sem <- testdf_sem %>%
# mutate_if(is.numeric, as.factor) %>%
data.matrix()
# testdf_sem <- na.omit(testdf_sem)
view(testdf_sem)   # check output
# # xlsx output
testdf_sem_out <- as.data.frame(testdf_sem)
save(testdf_sem_out , file = "testdf_nondummy.RData")
load("testdf_nondummy.RData")
write_xlsx(testdf_sem_out, path = "testdf_nondummy.xls", col_names = TRUE, format_headers = TRUE)
# Prep SEM data vars
testdf_sem <- testdf.v26 %>% select(
# outcome var
si_type, si_activ,
# premotivation
age, sexual, race, gender_tgd, sib_freq, ed_any, dx_mh, meds_any, finpast,
religios, ins_no, international, undercls,
# life events
gpa_sr, psyhx, fincur, drugs_yn, drug_mar, assault, binge,
# defeat-entrapment
deprawsc, anx_score, dep_impa, percneed,
# threats to internal/external moderation
persist, aaq_tot, flourish, talk, ther, satisfied_overall)
# create sem matrix
testdf_sem <- testdf_sem %>%
# mutate_if(is.numeric, as.factor) %>%
data.matrix()
# testdf_sem <- na.omit(testdf_sem)
view(testdf_sem)   # check output
# # xlsx output
testdf_sem_out <- as.data.frame(testdf_sem)
save(testdf_sem_out , file = "testdf_nondummy.RData")
load("testdf_nondummy.RData")
write_xlsx(testdf_sem_out, path = "testdf_nondummy.xls", col_names = TRUE, format_headers = TRUE)
# demographics
table(testdf.v26$age)
table(testdf.v26$si_type)
table(testdf.v26$gender_tgd)
table(testdf.v26$sexual)
table(testdf.v26$race)
table(testdf.v26$dx_mh)
# training data
var_desc_test <- describe(testdf_sem)
view(var_desc_test)
# xlsx output
save(var_desc_test, file = "var_desc_test.RData")
load("var_desc_test.RData")
write_xlsx(var_desc_test, path = "var_desc_test.xls", col_names = TRUE, format_headers = TRUE)
# Prep SEM data vars
testdf_sem1 <- testdf.v26 %>% select(
# outcome var
si_type, si_activ,
# premotivation
age, sexual, race, gender_tgd, sib_freq, ed_any, dx_mh, meds_any, finpast,
religios, residenc, school2_type, international, undercls, ins_no,
# life events
gpa_sr, psyhx, fincur, drugs_yn, drug_mar, assault, binge,
# defeat-entrapment
deprawsc, anx_score, dep_impa, percneed,
# threats to internal/external moderation
persist, aaq_tot, flourish, talk, ther, satisfied_overall)
# create sem matrix
testdf_sem1 <- data.matrix(testdf_sem1)
## Dummy col SEM w/ continuous
results_test <- dummy_cols(testdf_sem1, select_columns = c("si_type", "race"),
remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# xlsx output
save(results_test, file = "testdf_pls.RData")
load("testdf_pls.RData")
write_xlsx(results_test, path = "testdf_pls.xlsx", col_names = TRUE, format_headers = TRUE)
test18.v26 <- testdf.v26 %>%
filter(age == 18 | age == 19)
nrow(test18.v26)
table(test18.v26$age)
table(test18.v26$si_type)
table(test18.v26$gender_tgd)
table(test18.v26$sexual)
table(test18.v26$race)
table(test18.v26$dx_mh)
# Prep SEM data vars
test18_sem <- test18.v26 %>% select(
# outcome var
si_type, si_activ,
# premotivation
age, sexual, race, gender_tgd, sib_freq, ed_any, dx_mh, meds_any, finpast,
religios, residenc, school2_type, international, undercls, ins_no,
# life events
gpa_sr, psyhx, fincur, drugs_yn, drug_mar, assault, binge,
# defeat-entrapment
deprawsc, anx_score, dep_impa, percneed,
# threats to internal/external moderation
persist, aaq_tot, flourish, talk, ther, satisfied_overall)
## Dummy col SEM w/ continuous
results_test_18 <- dummy_cols(test18_sem, select_columns = c("si_type", "race", "residenc", "school2_type"),
remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# save output for offline SMART PLS
results_test_18 <- as.data.frame(results_test_18)
save(results_test_18, file = "results_test_18.RData")
load("results_test_18.RData")
write_xlsx(results_test_18, path = "results_test_18.xls", col_names = TRUE, format_headers = TRUE)
test20.v26 <- testdf.v26 %>%
filter(age == 20 | age == 21 | age == 22 | age == 23 | age == 24 | age == 25)
table(test20.v26$age)
table(test20.v26$si_type)
table(test20.v26$gender_tgd)
table(test20.v26$sexual)
table(test20.v26$race)
table(test20.v26$dx_mh)
# Prep SEM data vars
test20_sem <- test20.v26 %>% select(
# outcome var
si_type, si_activ,
# premotivation
age, sexual, race, gender_tgd, sib_freq, ed_any, dx_mh, meds_any, finpast,
religios,  residenc, school2_type, international, undercls, ins_no,
# life events
gpa_sr, psyhx, fincur, drugs_yn, drug_mar, assault, binge,
# defeat-entrapment
deprawsc, anx_score, dep_impa, percneed,
# threats to internal/external moderation
persist, aaq_tot, flourish, talk, ther, satisfied_overall)
# create SEM matrix
test20_sem <- data.matrix(test20_sem)
## Dummy columns for SEM
results_test_20 <- dummy_cols(test20_sem, select_columns = c("si_type", "race", "residenc", "school2_type"),
remove_first_dummy = TRUE, remove_selected_columns = TRUE)
nrow(testdf.v26) # 5700
nrow(traindf.v28) # 5638
nrow(test20.v26) # 3862
nrow(test18.v26) # 1838
# Save offline for SMART PLS
results_test_20 <- as.data.frame(results_test_20)
save(results_test_20, file = "results_test_20.RData")
load("results_test_20.RData")
write_xlsx(results_test_20, path = "results_test_20.xls", col_names = TRUE, format_headers = TRUE)
testdf.v26B <- testdf.v26
traindf.v28B <- traindf.v28
test20.v26B <- test20.v26
test18.v26B <- test18.v26
testdf.v26B$dx_mh <- as.numeric(testdf.v26B$dx_mh)
traindf.v28B$dx_mh <- as.numeric(traindf.v28B$dx_mh)
test20.v26B$dx_mh <- as.numeric(test20.v26B$dx_mh)
test18.v26B$dx_mh <- as.numeric(test18.v26B$dx_mh)
testdf.v26B$si_type <- as.numeric(testdf.v26B$si_type)
traindf.v28B$si_type <- as.numeric(traindf.v28B$si_type)
test20.v26B$si_type <- as.numeric(test20.v26B$si_type)
test18.v26B$si_type <- as.numeric(test18.v26B$si_type)
testdf.v26B$gender_tgd <- as.numeric(testdf.v26B$gender_tgd)
traindf.v28B$gender_tgd <- as.numeric(traindf.v28B$gender_tgd)
test20.v26B$gender_tgd <- as.numeric(test20.v26B$gender_tgd)
test18.v26B$gender_tgd <- as.numeric(test18.v26B$gender_tgd)
testdf.v26B$sexual<- as.numeric(testdf.v26B$sexual)
traindf.v28B$sexual <- as.numeric(traindf.v28B$sexual)
test20.v26B$sexual <- as.numeric(test20.v26B$sexual)
test18.v26B$sexual <- as.numeric(test18.v26B$sexual)
# training v. testing
wilcox.test(testdf.v26B$age,traindf.v28B$age, alternative = "two.sided") # W = 15986814, p-value = 0.6003
wilcox.test(testdf.v26B$si_type,traindf.v28B$si_type, alternative = "two.sided") # W = 16290286, p-value = 0.04873 *
wilcox.test(testdf.v26B$gender_tgd,traindf.v28B$gender_tgd, alternative = "two.sided") # W = 16052679, p-value = 0.6559
wilcox.test(testdf.v26B$sexual, traindf.v28B$sexual, alternative = "two.sided") # W = 16095008, p-value = 0.8912
wilcox.test(testdf.v26B$race, traindf.v28B$race, alternative = "two.sided") # W = 16022469, p-value = 0.7132
wilcox.test(testdf.v26B$dx_mh, traindf.v28B$dx_mh, alternative = "two.sided") # W = 16332928, p-value = 0.07548
# 18-19 v. 20-25
wilcox.test(test20.v26B$age, test18.v26B$age, alternative = "two.sided") # W = 6938184, p-value < 2.2e-16 ***
wilcox.test(test20.v26B$si_type, test18.v26B$si_type, alternative = "two.sided") # W = 3310351, p-value = 1.096e-05 ***
wilcox.test(test20.v26B$gender_tgd, test18.v26B$gender_tgd, alternative = "two.sided") # W = 3426793, p-value = 0.01721 *
wilcox.test(test20.v26B$sexual, test18.v26B$sexual, alternative = "two.sided") # W = 3246794, p-value = 2.354e-07 ***
wilcox.test(test20.v26B$race, test18.v26B$race, alternative = "two.sided") # W = 3498665, p-value = 0.5432
wilcox.test(test20.v26B$dx_mh, test18.v26B$dx_mh, alternative = "two.sided") # W = 3526078, p-value = 0.2394
# Prep SEM data vars
testdf_sem1 <- testdf.v26 %>% select(
# outcome var
si_type, si_activ,
# premotivation
age, sexual, race, gender_tgd, sib_freq, ed_any, dx_mh, meds_any, finpast,
religios, residenc, school2_type, international, undercls, ins_no,
# life events
gpa_sr, psyhx, fincur, drugs_yn, drug_mar, assault, binge,
# defeat-entrapment
deprawsc, anx_score, dep_impa, percneed,
# threats to internal/external moderation
persist, aaq_tot, flourish, talk, ther, satisfied_overall)
# create sem matrix
testdf_sem1 <- data.matrix(testdf_sem1)
## Dummy col SEM w/ continuous
results_test <- dummy_cols(testdf_sem1, select_columns = c("si_type", "race"),
remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# xlsx output
save(results_test, file = "testdf_pls.RData")
load("testdf_pls.RData")
write_xlsx(results_test, path = "testdf_pls.xlsx", col_names = TRUE, format_headers = TRUE)
test18.v26 <- testdf.v26 %>%
filter(age == 18 | age == 19)
nrow(test18.v26)
table(test18.v26$age)
table(test18.v26$si_type)
table(test18.v26$gender_tgd)
table(test18.v26$sexual)
table(test18.v26$race)
table(test18.v26$dx_mh)
# Prep SEM data vars
test18_sem <- test18.v26 %>% select(
# outcome var
si_type, si_activ,
# premotivation
age, sexual, race, gender_tgd, sib_freq, ed_any, dx_mh, meds_any, finpast,
religios, residenc, school2_type, international, undercls, ins_no,
# life events
gpa_sr, psyhx, fincur, drugs_yn, drug_mar, assault, binge,
# defeat-entrapment
deprawsc, anx_score, dep_impa, percneed,
# threats to internal/external moderation
persist, aaq_tot, flourish, talk, ther, satisfied_overall)
## Dummy col SEM w/ continuous
results_test_18 <- dummy_cols(test18_sem, select_columns = c("si_type", "race", "residenc", "school2_type"),
remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# save output for offline SMART PLS
results_test_18 <- as.data.frame(results_test_18)
save(results_test_18, file = "results_test_18.RData")
load("results_test_18.RData")
write_xlsx(results_test_18, path = "results_test_18.xls", col_names = TRUE, format_headers = TRUE)
testdf.v26B <- testdf.v26
traindf.v28B <- traindf.v28
test20.v26B <- test20.v26
test18.v26B <- test18.v26
testdf.v26B$dx_mh <- as.numeric(testdf.v26B$dx_mh)
traindf.v28B$dx_mh <- as.numeric(traindf.v28B$dx_mh)
test20.v26B$dx_mh <- as.numeric(test20.v26B$dx_mh)
test18.v26B$dx_mh <- as.numeric(test18.v26B$dx_mh)
testdf.v26B$si_type <- as.numeric(testdf.v26B$si_type)
traindf.v28B$si_type <- as.numeric(traindf.v28B$si_type)
test20.v26B$si_type <- as.numeric(test20.v26B$si_type)
test18.v26B$si_type <- as.numeric(test18.v26B$si_type)
testdf.v26B$gender_tgd <- as.numeric(testdf.v26B$gender_tgd)
traindf.v28B$gender_tgd <- as.numeric(traindf.v28B$gender_tgd)
test20.v26B$gender_tgd <- as.numeric(test20.v26B$gender_tgd)
test18.v26B$gender_tgd <- as.numeric(test18.v26B$gender_tgd)
testdf.v26B$sexual<- as.numeric(testdf.v26B$sexual)
traindf.v28B$sexual <- as.numeric(traindf.v28B$sexual)
test20.v26B$sexual <- as.numeric(test20.v26B$sexual)
test18.v26B$sexual <- as.numeric(test18.v26B$sexual)
# training v. testing
wilcox.test(testdf.v26B$age,traindf.v28B$age, alternative = "two.sided") # W = 15986814, p-value = 0.6003
wilcox.test(testdf.v26B$si_type,traindf.v28B$si_type, alternative = "two.sided") # W = 16290286, p-value = 0.04873 *
wilcox.test(testdf.v26B$gender_tgd,traindf.v28B$gender_tgd, alternative = "two.sided") # W = 16052679, p-value = 0.6559
wilcox.test(testdf.v26B$sexual, traindf.v28B$sexual, alternative = "two.sided") # W = 16095008, p-value = 0.8912
wilcox.test(testdf.v26B$race, traindf.v28B$race, alternative = "two.sided") # W = 16022469, p-value = 0.7132
wilcox.test(testdf.v26B$dx_mh, traindf.v28B$dx_mh, alternative = "two.sided") # W = 16332928, p-value = 0.07548
# 18-19 v. 20-25
wilcox.test(test20.v26B$age, test18.v26B$age, alternative = "two.sided") # W = 6938184, p-value < 2.2e-16 ***
wilcox.test(test20.v26B$si_type, test18.v26B$si_type, alternative = "two.sided") # W = 3310351, p-value = 1.096e-05 ***
wilcox.test(test20.v26B$gender_tgd, test18.v26B$gender_tgd, alternative = "two.sided") # W = 3426793, p-value = 0.01721 *
wilcox.test(test20.v26B$sexual, test18.v26B$sexual, alternative = "two.sided") # W = 3246794, p-value = 2.354e-07 ***
wilcox.test(test20.v26B$race, test18.v26B$race, alternative = "two.sided") # W = 3498665, p-value = 0.5432
wilcox.test(test20.v26B$dx_mh, test18.v26B$dx_mh, alternative = "two.sided") # W = 3526078, p-value = 0.2394
traindf_le <- traindf.v19 %>% select(gpa_sr, fincur, assault, binge, drugs_yn, drug_mar, psyhx)
traindf_le <- na.omit(traindf_le)
# create corr matrix, with dummy vars
traindf_le <- traindf_le %>%
mutate_if(is.numeric, as.factor) %>%
dummy_cols(remove_first_dummy = TRUE) %>%
data.matrix()
# traindf_le   # check output
results_le <- dummy_cols(traindf_le, select_columns = c("gpa_sr", "fincur", "binge", "drugs_yn", "drug_mar",
"assault", "psyhx"),
remove_first_dummy = TRUE, remove_selected_columns = TRUE)
le_pca <- PCA(results_le, graph=FALSE)  # apply PCA
le_pca$eig   # output matrix with eigenvalues
eigval_le <- get_eigenvalue(le_pca)
eigval_le
# visualization for PCA, FAMD
fviz_screeplot(le_pca, addlabels = TRUE, ylim = c(0, 50))
fviz_pca_var(le_pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_famd_var(le_pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_cos2(le_pca, choice = "var", axes = 1,
fill = "steelblue", color = "steelblue",
sort.val = c("desc", "asc", "none"),
top = 40,
xtickslab.rt = 45,
ggtheme = theme_minimal())
missing_dfs <- list()
for (k in 1:length(var_names)) {
#create skeleton of missingness matrix
var <- count(traindf.v28, traindf.v28[var_names[k]])
var_ncol <- ncol(var)
for (j in 1:length(var_names)) {
var[, var_ncol + j] <- 999
}
# create column headers and vectors for school, total students, then each variable count
names <- c(paste0(var_names[k], "_values"), "total", var_names)
names(var) <- names
# input values for each school missingness across all variables
for (j in 1:(length(var_names))) {
for (i in 1:nrow(var)) {   # i corresponds to rows, j to columns
var[i, 2 + j] <- sum(!is.na(traindf.v28[traindf.v28[[var_names[k]]] == var[[i,1]], var_names[j]]))
}
}
# add percentage in each column
var_m <- as.matrix(var[-1])
props <- var_m[,2:ncol(var_m)] / var_m[,1]
var <- data.frame(var[, 1:2], props)
replace_na("NA")
missing_dfs[[k]] <- var
}
names(missing_dfs) <- var_names
save(missing_dfs, file = "missing_dfs.RData")
load("missing_dfs.RData")
write_xlsx(missing_dfs, path = "missing.xlsx", col_names = TRUE, format_headers = TRUE)
missing_dfs <- list()
for (k in 1:length(var_names)) {
#create skeleton of missingness matrix
var <- count(traindf.v28, traindf.v28[var_names[k]])
var_ncol <- ncol(var)
for (j in 1:length(var_names)) {
var[, var_ncol + j] <- 999
}
# create column headers and vectors for school, total students, then each variable count
names <- c(paste0(var_names[k], "_values"), "total", var_names)
names(var) <- names
# input values for each school missingness across all variables
for (j in 1:(length(var_names))) {
for (i in 1:nrow(var)) {   # i corresponds to rows, j to columns
var[i, 2 + j] <- sum(!is.na(traindf.v28[traindf.v28[[var_names[k]]] == var[[i,1]], var_names[j]]))
}
}
# add percentage in each column
var_m <- as.matrix(var[-1])
props <- var_m[,2:ncol(var_m)] / var_m[,1]
var <- data.frame(var[, 1:2], props)
replace_na("NA")
missing_dfs[[k]] <- var
}
names(missing_dfs) <- var_names
save(missing_dfs, file = "missing_dfs.RData")
load("missing_dfs.RData")
write_xlsx(missing_dfs, path = "missing_dfs.xlsx", col_names = TRUE, format_headers = TRUE)
missing_dfs <- list()
for (k in 1:length(var_names)) {}
#create skeleton of missingness matrix
var <- count(traindf.v28, traindf.v28[var_names[k]])
var_ncol <- ncol(var)
for (j in 1:length(var_names)) {
var[, var_ncol + j] <- 999
}
# create column headers and vectors for school, total students, then each variable count
names <- c(paste0(var_names[k], "_values"), "total", var_names)
names(var) <- names
# input values for each school missingness across all variables
for (j in 1:(length(var_names))) {
for (i in 1:nrow(var)) {   # i corresponds to rows, j to columns
var[i, 2 + j] <- sum(!is.na(traindf.v28[traindf.v28[[var_names[k]]] == var[[i,1]], var_names[j]]))
}
}
# add percentage in each column
var_m <- as.matrix(var[-1])
props <- var_m[,2:ncol(var_m)] / var_m[,1]
var <- data.frame(var[, 1:2], props)
replace_na("NA")
missing_dfs[[k]] <- var
}
missing_dfs <- list()
for (k in 1:length(var_names)) {}
#create skeleton of missingness matrix
var <- count(traindf.v28, traindf.v28[var_names[k]])
var_ncol <- ncol(var)
for (j in 1:length(var_names)) {
var[, var_ncol + j] <- 999
}
# create column headers and vectors for school, total students, then each variable count
names <- c(paste0(var_names[k], "_values"), "total", var_names)
names(var) <- names
# input values for each school missingness across all variables
for (j in 1:(length(var_names))) {
for (i in 1:nrow(var)) {   # i corresponds to rows, j to columns
var[i, 2 + j] <- sum(!is.na(traindf.v28[traindf.v28[[var_names[k]]] == var[[i,1]], var_names[j]]))
}
}
# add percentage in each column
var_m <- as.matrix(var[-1])
props <- var_m[,2:ncol(var_m)] / var_m[,1]
var <- data.frame(var[, 1:2], props)
replace_na("NA")
missing_dfs[[k]] <- var
names(missing_dfs) <- var_names
save(missing_dfs, file = "missing_dfs.RData")
load("missing_dfs.RData")
write_xlsx(missing_dfs, path = "missing_dfs.xlsx", col_names = TRUE, format_headers = TRUE)
missing_dfs <- list()
for (k in 1:length(var_names)) {}
#create skeleton of missingness matrix
var <- count(traindf.v28, traindf.v28[var_names[k]])
var_ncol <- ncol(var)
for (j in 1:length(var_names)) {
var[, var_ncol + j] <- 999
}
# create column headers and vectors for school, total students, then each variable count
names <- c(paste0(var_names[k], "_values"), "total", var_names)
names(var) <- names
# input values for each school missingness across all variables
for (j in 1:(length(var_names))) {
for (i in 1:nrow(var)) {   # i corresponds to rows, j to columns
var[i, 2 + j] <- sum(!is.na(traindf.v28[traindf.v28[[var_names[k]]] == var[[i,1]], var_names[j]]))
}
}
# add percentage in each column
var_m <- as.matrix(var[-1])
props <- var_m[,2:ncol(var_m)] / var_m[,1]
var <- data.frame(var[, 1:2], props)
replace_na("NA")
missing_dfs[[k]] <- var
names(missing_dfs) <- var_names
save(missing_dfs, file = "missing_dfs.RData")
load("missing_dfs.RData")
#write_xlsx(missing_dfs, path = "missing_dfs.xlsx", col_names = TRUE, format_headers = TRUE)
# missing_dfs <- list()
# for (k in 1:length(var_names)) {}
#
# #create skeleton of missingness matrix
# var <- count(traindf.v28, traindf.v28[var_names[k]])
# var_ncol <- ncol(var)
#
# for (j in 1:length(var_names)) {
#   var[, var_ncol + j] <- 999
# }
# # create column headers and vectors for school, total students, then each variable count
# names <- c(paste0(var_names[k], "_values"), "total", var_names)
# names(var) <- names
#
# # input values for each school missingness across all variables
# for (j in 1:(length(var_names))) {
# for (i in 1:nrow(var)) {   # i corresponds to rows, j to columns
#   var[i, 2 + j] <- sum(!is.na(traindf.v28[traindf.v28[[var_names[k]]] == var[[i,1]], var_names[j]]))
# }
# }
# # add percentage in each column
# var_m <- as.matrix(var[-1])
# props <- var_m[,2:ncol(var_m)] / var_m[,1]
# var <- data.frame(var[, 1:2], props)
# replace_na("NA")
# missing_dfs[[k]] <- var
#
# names(missing_dfs) <- var_names
# save(missing_dfs, file = "missing_dfs.RData")
# load("missing_dfs.RData")
# #write_xlsx(missing_dfs, path = "missing_dfs.xlsx", col_names = TRUE, format_headers = TRUE)
